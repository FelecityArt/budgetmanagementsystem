import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.awt.Cursor;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Felicia
 */
public class ExpensesPanel extends javax.swing.JPanel {
    
    private void hideTables() {
        entertainmentScrollPane.setVisible(false);
        entertainmentTable.setVisible(false);
        foodScrollPane.setVisible(false);
        foodTable.setVisible(false);
        transportationScrollPane.setVisible(false);
        transportationTable.setVisible(false);
        housingScrollPane.setVisible(false);
        housingTable.setVisible(false);
        housingScrollPane.setVisible(false);
        housingTable.setVisible(false);
        otherScrollPane.setVisible(false);
        otherTable.setVisible(false);
    }
    
    private JTable visibleTable() {
        if (housingTable.isVisible()) {
            return housingTable;
        } else if (foodTable.isVisible()) {
            return foodTable;
        } else if (entertainmentTable.isVisible()) {
            return entertainmentTable;
        } else if (transportationTable.isVisible()) {
            return transportationTable;
        } else if (otherTable.isVisible()) {
            return otherTable;
        } else {
            return null;
        }
    }
    /**
     * Creates new form ExpensesPanel
     */
    public ExpensesPanel() {
        initComponents();
        loadData();
    }

    private void loadData() {
        Expense.loadTableData(entertainmentTable, "entertainmentTable.txt", Expense.entertainmentData);
        Expense.loadTableData(foodTable, "foodTable.txt", Expense.foodData);
        Expense.loadTableData(housingTable, "housingTable.txt", Expense.housingData);
        Expense.loadTableData(transportationTable, "transportationTable.txt", Expense.transportationData);
        Expense.loadTableData(otherTable, "otherTable.txt", Expense.otherData);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        expensesPanel = new javax.swing.JPanel();
        expensesLabel = new javax.swing.JLabel();
        selectDateLabel = new javax.swing.JLabel();
        foodButton = new javax.swing.JButton();
        transportationButton = new javax.swing.JButton();
        housingButton = new javax.swing.JButton();
        entertainmentButton = new javax.swing.JButton();
        otherButton = new javax.swing.JButton();
        saveTableButton = new javax.swing.JButton();
        clearAllTablesButton = new javax.swing.JButton();
        calendar = new com.toedter.calendar.JCalendar();
        entertainmentScrollPane = new javax.swing.JScrollPane();
        entertainmentTable = new javax.swing.JTable();
        foodScrollPane = new javax.swing.JScrollPane();
        foodTable = new javax.swing.JTable();
        transportationScrollPane = new javax.swing.JScrollPane();
        transportationTable = new javax.swing.JTable();
        housingScrollPane = new javax.swing.JScrollPane();
        housingTable = new javax.swing.JTable();
        otherScrollPane = new javax.swing.JScrollPane();
        otherTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        addDataButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        calculateDifferenceButton = new javax.swing.JButton();

        setAutoscrolls(true);

        expensesPanel.setBackground(new java.awt.Color(255, 255, 255));
        expensesPanel.setAutoscrolls(true);
        expensesPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        expensesLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        expensesLabel.setText("Expenses");
        expensesLabel.setAutoscrolls(true);
        expensesPanel.add(expensesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 100, 40));

        selectDateLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        selectDateLabel.setText("Select date:");
        selectDateLabel.setAutoscrolls(true);
        expensesPanel.add(selectDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 60, 100, 30));

        foodButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        foodButton.setBackground(new java.awt.Color(255, 204, 204));
        foodButton.setText("Food");
        foodButton.setAutoscrolls(true);
        foodButton.setBorderPainted(false);
        foodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(foodButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, -1, -1));

        transportationButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        transportationButton.setBackground(new java.awt.Color(255, 255, 153));
        transportationButton.setText("Transportation");
        transportationButton.setBorderPainted(false);
        transportationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transportationButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(transportationButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 10, -1, -1));

        housingButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        housingButton.setBackground(new java.awt.Color(205, 204, 255));
        housingButton.setText("Housing");
        housingButton.setAutoscrolls(true);
        housingButton.setBorderPainted(false);
        housingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                housingButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(housingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 10, -1, -1));

        entertainmentButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        entertainmentButton.setBackground(new java.awt.Color(204, 255, 255));
        entertainmentButton.setText("Entertainment");
        entertainmentButton.setAutoscrolls(true);
        entertainmentButton.setBorderPainted(false);
        entertainmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entertainmentButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(entertainmentButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        otherButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        otherButton.setBackground(new java.awt.Color(235, 255, 204));
        otherButton.setText("Other");
        otherButton.setAutoscrolls(true);
        otherButton.setBorderPainted(false);
        otherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherButtonActionPerformed(evt);
            }
        });
        otherButton.setVisible(true);
        expensesPanel.add(otherButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, -1, -1));

        saveTableButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        saveTableButton.setBackground(new java.awt.Color(51, 255, 255));
        saveTableButton.setText("SAVE TABLE");
        saveTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTableButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(saveTableButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 550, -1, -1));

        clearAllTablesButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        clearAllTablesButton.setBackground(new java.awt.Color(255, 0, 0));
        clearAllTablesButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        clearAllTablesButton.setForeground(new java.awt.Color(255, 255, 255));
        clearAllTablesButton.setText("CLEAR ALL TABLES");
        clearAllTablesButton.setAutoscrolls(true);
        clearAllTablesButton.setBorderPainted(false);
        clearAllTablesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllTablesButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(clearAllTablesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 310, 240, -1));

        calendar.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        calendar.setToolTipText("Select a date");
        calendar.setAutoscrolls(true);
        calendar.setDecorationBackgroundColor(new java.awt.Color(51, 255, 255));
        expensesPanel.add(calendar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 100, 240, 150));

        entertainmentScrollPane.setAutoscrolls(true);

        entertainmentTable.setAutoCreateRowSorter(true);
        entertainmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Amusement Park", "0", "0", "0"},
                {"Concert", "0", "0", "0"},
                {"Hotel stay", "0", "0", "0"},
                {"Games", "0", "0", "0"},
                {"Party", "0", "0", "0"}
            },
            new String [] {
                "Expense", "Budget", "Actual Spent", "Difference"
            }
        ));
        entertainmentTable.setToolTipText("Double-click to edit data");
        entertainmentTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        entertainmentTable.setGridColor(new java.awt.Color(112, 0, 73));
        entertainmentTable.setInheritsPopupMenu(true);
        entertainmentTable.setName("entertainmentTable");
        CurrencyRenderer.formatCurrencyColumns(entertainmentTable, 1, 2, 3);
        entertainmentTable.setSelectionBackground(new java.awt.Color(204, 204, 204));
        entertainmentTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        entertainmentTable.setShowGrid(true);
        entertainmentTable.setSurrendersFocusOnKeystroke(true);
        entertainmentTable.getTableHeader().setReorderingAllowed(false);
        entertainmentScrollPane.setViewportView(entertainmentTable);

        expensesPanel.add(entertainmentScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 600, 450));

        foodScrollPane.setAutoscrolls(true);

        foodTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Breakfast", "0", "0", "0"},
                {"Lunch", "0", "0", "0"},
                {"Dinner", "0", "0", "0"},
                {"Drinks", "0", "0", "0"}
            },
            new String [] {
                "Expense", "Budget", "Actual Spent", "Difference"
            }
        ));
        foodTable.setToolTipText("Double-click to edit data");
        foodTable.setGridColor(new java.awt.Color(112, 0, 73));
        foodTable.setName("foodTable");
        foodTable.setSelectionBackground(new java.awt.Color(204, 204, 204));
        foodTable.setShowGrid(true);
        CurrencyRenderer.formatCurrencyColumns(foodTable, 1, 2, 3);
        foodScrollPane.setViewportView(foodTable);

        expensesPanel.add(foodScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 600, 450));

        transportationScrollPane.setAutoscrolls(true);

        transportationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Flight", "0", "0", "0"},
                {"Fuel", "0", "0", "0"},
                {"Taxi fare", "0", "0", "0"},
                {"Bus fare", "0", "0", "0"},
                {"Parking", "0", "0", "0"}
            },
            new String [] {
                "Expense", "Budget", "Actual Spent", "Difference"
            }
        ));
        transportationTable.setToolTipText("Double-click to edit data");
        transportationTable.setGridColor(new java.awt.Color(112, 0, 73));
        transportationTable.setName("transportationTable");
        transportationTable.setSelectionBackground(new java.awt.Color(204, 204, 204));
        transportationTable.setShowGrid(true);
        CurrencyRenderer.formatCurrencyColumns(transportationTable, 1, 2, 3);
        transportationScrollPane.setViewportView(transportationTable);

        expensesPanel.add(transportationScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 600, 450));

        housingScrollPane.setAutoscrolls(true);

        housingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {" Rent/Mortgage", "0", "0", "0"},
                {"Taxes", "0", "0", "0"},
                {"Water ", "0", "0", "0"},
                {"Gas", "0", "0", "0"},
                {"Electricity", "0", "0", "0"},
                {"Cable/Internet services", "0", "0", "0"},
                {"Insurance", "0", "0", "0"},
                {"Maintenance", "0", "0", "0"}
            },
            new String [] {
                "Expense", "Budget", "Actual Spent", "Difference"
            }
        ));
        housingTable.setToolTipText("Double-click to edit data");
        housingTable.setGridColor(new java.awt.Color(112, 0, 73));
        housingTable.setName("housingTable");
        housingTable.setSelectionBackground(new java.awt.Color(204, 204, 204));
        housingTable.setShowGrid(true);
        CurrencyRenderer.formatCurrencyColumns(housingTable, 1, 2, 3);
        housingScrollPane.setViewportView(housingTable);

        expensesPanel.add(housingScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 600, 450));

        otherScrollPane.setAutoscrolls(true);

        otherTable.setAutoCreateRowSorter(true);
        otherTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Expense 1", "0", "0", "0"},
                {"Expense 2", "0", "0", "0"},
                {"Expense 3", "0", "0", "0"},
                {"Expense 4", "0", "0", "0"},
                {"Expense 5", "0", "0", "0"}
            },
            new String [] {
                "Expense", "Budget", "Actual Spent", "Difference"
            }
        ));
        otherTable.setToolTipText("Double-click to edit data");
        otherTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        otherTable.setGridColor(new java.awt.Color(112, 0, 73));
        otherTable.setInheritsPopupMenu(true);
        otherTable.setName("otherTable");
        CurrencyRenderer.formatCurrencyColumns(otherTable, 1, 2, 3);
        otherTable.setSelectionBackground(new java.awt.Color(204, 204, 204));
        otherTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        otherTable.setShowGrid(true);
        otherTable.setSurrendersFocusOnKeystroke(true);
        otherTable.getTableHeader().setReorderingAllowed(false);
        otherScrollPane.setViewportView(otherTable);

        expensesPanel.add(otherScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 600, 450));

        deleteButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        deleteButton.setBackground(new java.awt.Color(255, 0, 102));
        deleteButton.setText("DELETE EXPENSE");
        deleteButton.setAutoscrolls(true);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 550, -1, -1));

        loadButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        loadButton.setBackground(new java.awt.Color(57, 255, 50));
        loadButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        loadButton.setText("LOAD");
        loadButton.setToolTipText("Load all tables for the selected date");
        loadButton.setAutoscrolls(true);
        loadButton.setBorderPainted(false);
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(loadButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 270, 110, -1));

        addDataButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        addDataButton.setBackground(new java.awt.Color(57, 255, 50));
        addDataButton.setText("ADD EXPENSE");
        addDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(addDataButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 550, -1, -1));

        saveButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        saveButton.setBackground(new java.awt.Color(51, 255, 255));
        saveButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        saveButton.setText("SAVE");
        saveButton.setToolTipText("Save all tables for the selected date");
        saveButton.setAutoscrolls(true);
        saveButton.setBorderPainted(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 270, 120, -1));

        saveTableButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        calculateDifferenceButton.setBackground(new java.awt.Color(251, 255, 50));
        calculateDifferenceButton.setText("CALCULATE DIFFERENCE");
        calculateDifferenceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateDifferenceButtonActionPerformed(evt);
            }
        });
        expensesPanel.add(calculateDifferenceButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 550, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(expensesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(expensesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void foodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodButtonActionPerformed
        hideTables();
        foodScrollPane.setVisible(true);
        foodTable.setVisible(true);
    }//GEN-LAST:event_foodButtonActionPerformed

    private void transportationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transportationButtonActionPerformed
        hideTables();
        transportationScrollPane.setVisible(true);
        transportationTable.setVisible(true);
    }//GEN-LAST:event_transportationButtonActionPerformed

    private void housingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_housingButtonActionPerformed
        hideTables();
        housingScrollPane.setVisible(true);
        housingTable.setVisible(true);
    }//GEN-LAST:event_housingButtonActionPerformed

    private void entertainmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entertainmentButtonActionPerformed
        hideTables();
        entertainmentScrollPane.setVisible(true);
        entertainmentTable.setVisible(true);
    }//GEN-LAST:event_entertainmentButtonActionPerformed

    private void otherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherButtonActionPerformed
        hideTables();
        otherScrollPane.setVisible(true);
        otherTable.setVisible(true);
    }//GEN-LAST:event_otherButtonActionPerformed

    private void saveTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTableButtonActionPerformed
        JTable table = visibleTable();
        if (table != null) {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            int rowCount = model.getRowCount();
            ArrayList<List<String>> dataList = null;
            switch (table.getName()) {
                case "housingTable":
                    dataList = Expense.housingData;
                    break;
                case "foodTable":
                    dataList = Expense.foodData;
                    break;
                case "entertainmentTable":
                    dataList = Expense.entertainmentData;
                    break;
                case "transportationTable":
                    dataList = Expense.transportationData;
                    break;
                case "otherTable":
                    dataList = Expense.otherData;
                    break;
                }
            if (dataList != null) {
                if (rowCount > 0) {
                    dataList.clear();
                    for (int i = 0; i < rowCount; i++) {
                        List<String> row = new ArrayList<>();
                        for (int j = 0; j < model.getColumnCount(); j++) {
                            row.add(model.getValueAt(i, j).toString());
                        }
                        dataList.add(row);
                    }
                    try {
                        String filename = table.getName() + ".txt";
                        Expense.exportTable(dataList, filename);
                        JOptionPane.showMessageDialog(this, "Table has been saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "There is nothing to save!", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "The table is empty", "Warning", JOptionPane.WARNING_MESSAGE);
             }
        }        
    }//GEN-LAST:event_saveTableButtonActionPerformed

    private void clearAllTablesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllTablesButtonActionPerformed
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to clear all table data?", "Confirm Clear", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            DefaultTableModel foodModel = (DefaultTableModel) foodTable.getModel();
            Expense.clearTableData(foodModel);

            DefaultTableModel entertainmentModel = (DefaultTableModel) entertainmentTable.getModel();
            Expense.clearTableData(entertainmentModel);

            DefaultTableModel transportationModel = (DefaultTableModel) transportationTable.getModel();
            Expense.clearTableData(transportationModel);

            DefaultTableModel housingModel = (DefaultTableModel) housingTable.getModel();
            Expense.clearTableData(housingModel);

            DefaultTableModel otherModel = (DefaultTableModel) otherTable.getModel();
            Expense.clearTableData(otherModel);
        }
    }//GEN-LAST:event_clearAllTablesButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // Get the selected date from the calendar
        Date selectedDate = calendar.getDate();
        if (selectedDate == null) {
            // Notify the user that no date has been selected
            JOptionPane.showMessageDialog(null, "Please select a date.");
            return;
        }
        // Import the tables using the selected date
        try {
            DefaultTableModel entertainmentModel = (DefaultTableModel) entertainmentTable.getModel();
            DefaultTableModel foodModel = (DefaultTableModel) foodTable.getModel();
            DefaultTableModel transportationModel = (DefaultTableModel) transportationTable.getModel();
            DefaultTableModel housingModel = (DefaultTableModel) housingTable.getModel();
            DefaultTableModel otherModel = (DefaultTableModel) otherTable.getModel();

            // Clear out any existing rows in the models
            entertainmentModel.setRowCount(0);
            foodModel.setRowCount(0);
            transportationModel.setRowCount(0);
            housingModel.setRowCount(0);
            otherModel.setRowCount(0);

            Expense.importTable(entertainmentModel, "entertainmentTable.txt", selectedDate);
            Expense.importTable(foodModel, "foodTable.txt", selectedDate);
            Expense.importTable(transportationModel, "transportationTable.txt", selectedDate);
            Expense.importTable(housingModel, "housingTable.txt", selectedDate);
            Expense.importTable(otherModel, "otherTable.txt", selectedDate);

            // Notify the user that the tables have been imported
            SimpleDateFormat dateFormat = new SimpleDateFormat("MMMM, dd, yyyy");
            String dateString = dateFormat.format(selectedDate);
            
            entertainmentTable.setModel(entertainmentModel);
            foodTable.setModel(foodModel);
            transportationTable.setModel(transportationModel);
            housingTable.setModel(housingModel);
            otherTable.setModel(otherModel);

            JOptionPane.showMessageDialog(null, "Tables imported successfully for " + dateString);
        } catch (IOException ex) {
            // Notify the user of any errors during the import process
            JOptionPane.showMessageDialog(null, "Error importing tables: " + ex.getMessage());
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void addDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataButtonActionPerformed
        // Get the currently visible table
        JTable visibleTable = visibleTable();
        // Get the table model of the visible table
        DefaultTableModel model = (DefaultTableModel) visibleTable.getModel();
        // Create a new row of data to add to the table
        Object[] newRowData = {"New Expense", 0, 0, 0};
        // Add the new row to the table model
        model.addRow(newRowData);
    }//GEN-LAST:event_addDataButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Get the currently visible table
        JTable visibleTable = visibleTable();
        // Get the indices of the selected rows
        int[] selectedRows = visibleTable.getSelectedRows();
        // Get the table model of the visible table
        DefaultTableModel model = (DefaultTableModel) visibleTable.getModel();
        // If no rows are selected, display a message to the user
        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        } else {
            // Ask the user to confirm that they want to delete the selected row(s)
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected row(s)?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Loop through the selected rows and remove them from the table model
                for (int i = selectedRows.length - 1; i >= 0; i--) {
                    model.removeRow(selectedRows[i]);
                }
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // Get the selected date from the calendar
        Date selectedDate = calendar.getDate();
        if (selectedDate == null) {
            // Notify the user that no date has been selected
            JOptionPane.showMessageDialog(null, "Please select a date.");
            return;
        }

        DefaultTableModel entertainmentModel = (DefaultTableModel) entertainmentTable.getModel();
        DefaultTableModel foodModel = (DefaultTableModel) foodTable.getModel();
        DefaultTableModel transportationModel = (DefaultTableModel) transportationTable.getModel();
        DefaultTableModel housingModel = (DefaultTableModel) housingTable.getModel();
        DefaultTableModel otherModel = (DefaultTableModel) otherTable.getModel();

        // Check if any of the tables are empty
        if (Expense.checkEmpty(entertainmentModel) || Expense.checkEmpty(foodModel) ||
            Expense.checkEmpty(transportationModel) || Expense.checkEmpty(housingModel) ||
            Expense.checkEmpty(otherModel)) {
            JOptionPane.showMessageDialog(null, "One or more tables are empty.");
            return;
        }

        // Get the data from each table model and add to respective data list
        ArrayList<List<String>> entertainmentDataList = new ArrayList<>();
        for (int i = 0; i < entertainmentModel.getRowCount(); i++) {
            List<String> row = new ArrayList<>();
            for (int j = 0; j < entertainmentModel.getColumnCount(); j++) {
                row.add(entertainmentModel.getValueAt(i, j).toString());
            }
            entertainmentDataList.add(row);
        }

        ArrayList<List<String>> foodDataList = new ArrayList<>();
        for (int i = 0; i < foodModel.getRowCount(); i++) {
            List<String> row = new ArrayList<>();
            for (int j = 0; j < foodModel.getColumnCount(); j++) {
                row.add(foodModel.getValueAt(i, j).toString());
            }
            foodDataList.add(row);
        }

        ArrayList<List<String>> transportationDataList = new ArrayList<>();
        for (int i = 0; i < transportationModel.getRowCount(); i++) {
            List<String> row = new ArrayList<>();
            for (int j = 0; j < transportationModel.getColumnCount(); j++) {
                row.add(transportationModel.getValueAt(i, j).toString());
            }
            transportationDataList.add(row);
        }

        ArrayList<List<String>> housingDataList = new ArrayList<>();
        for (int i = 0; i < housingModel.getRowCount(); i++) {
            List<String> row = new ArrayList<>();
            for (int j = 0; j < housingModel.getColumnCount(); j++) {
                row.add(housingModel.getValueAt(i, j).toString());
            }
            housingDataList.add(row);
        }

        ArrayList<List<String>> otherDataList = new ArrayList<>();
        for (int i = 0; i < otherModel.getRowCount(); i++) {
            List<String> row = new ArrayList<>();
            for (int j = 0; j < otherModel.getColumnCount(); j++) {
                row.add(otherModel.getValueAt(i, j).toString());
            }
            otherDataList.add(row);
        }

        // Export the tables using the selected date
        try {
            Expense.exportTable(entertainmentDataList, "entertainmentTable.txt");
            Expense.exportTable(foodDataList, "foodTable.txt");
            Expense.exportTable(transportationDataList, "transportationTable.txt");
            Expense.exportTable(housingDataList, "housingTable.txt");
            Expense.exportTable(otherDataList, "otherTable.txt");

            // Format the date string in MMMM, dd, yyyy format
            SimpleDateFormat dateFormat = new SimpleDateFormat("MMMM, dd, yyyy");
            String dateString = dateFormat.format(selectedDate);
            // Notify the user that the tables have been exported
            JOptionPane.showMessageDialog(null, "Tables exported successfully for " + dateString);
        } catch (IOException ex) {
            // Notify the user of any errors during the export process
            JOptionPane.showMessageDialog(null, "Error exporting tables: " + ex.getMessage());
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void calculateDifferenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateDifferenceButtonActionPerformed
        Expense.calculateDifference(visibleTable());
    }//GEN-LAST:event_calculateDifferenceButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDataButton;
    private javax.swing.JButton calculateDifferenceButton;
    private com.toedter.calendar.JCalendar calendar;
    private javax.swing.JButton clearAllTablesButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton entertainmentButton;
    private javax.swing.JScrollPane entertainmentScrollPane;
    private javax.swing.JTable entertainmentTable;
    private javax.swing.JLabel expensesLabel;
    private javax.swing.JPanel expensesPanel;
    private javax.swing.JButton foodButton;
    private javax.swing.JScrollPane foodScrollPane;
    private javax.swing.JTable foodTable;
    private javax.swing.JButton housingButton;
    private javax.swing.JScrollPane housingScrollPane;
    private javax.swing.JTable housingTable;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton otherButton;
    private javax.swing.JScrollPane otherScrollPane;
    private javax.swing.JTable otherTable;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveTableButton;
    private javax.swing.JLabel selectDateLabel;
    private javax.swing.JButton transportationButton;
    private javax.swing.JScrollPane transportationScrollPane;
    private javax.swing.JTable transportationTable;
    // End of variables declaration//GEN-END:variables

    
}
